{"version":3,"sources":["types/types.js","reducers/uiReducer.js","reducers/eventReducer.js","reducers/authReducer.js","reducers/rootReducer.js","store/store.js","router/PrivateRoute.js","router/PublicRoute.js","actions/uiActions.js","helpers/fetchData.js","helpers/prepareEvents.js","actions/eventActions.js","components/ui/DeleteEventFAB.js","actions/authActions.js","components/ui/Navbar.js","components/calendar/CalendarEvent.js","components/calendar/CalendarModal.js","components/ui/NewEventFAB.js","components/calendar/CalendarScreen.js","hooks/useForm.js","components/auth/RegisterScreen.js","components/auth/LoginScreen.js","router/AuthRouter.js","router/AppRouter.js","App.js","index.js"],"names":["types","UI_OPEN_MODAL","UI_CLOSE_MODAL","UI_SET_ERROR","EVENT_NEW","EVENT_START_NEW","EVENT_UPDATE","EVENT_SET_ACTIVE","EVENT_CLEAR_ACTIVE_EVENT","EVENT_DELETE","EVENT_LOAD","EVENT_LOGOUT","AUTH_LOGIN","AUTH_LOGOUT","AUTH_FINISH_CHECKING_LOGIN_STATE","AUTH_START_LOGIN","AUTH_START_REGISTER","AUTH_START_JWT_RENEW","initialState","modal_open","uiReducer","state","action","type","error_msg","payload","errorMsg","input_name","inputName","events","active_event","eventReducer","map","event","id","filter","checking","authReducer","rootReducer","combineReducers","ui","auth","composeEnhancers","compose","store","createStore","applyMiddleware","thunk","PrivateRoute","isAuthenticated","Component","component","rest","props","to","PublicRoute","uiOpenModal","uiSetError","BASE_URL","process","fetchDataWithoutJWT","endpoint","data","method","URL","fetch","headers","body","JSON","stringify","fetchDataWithJWT","token","localStorage","getItem","prepareEvents","start","moment","toDate","end","eventNew","eventLoad","eventUpdate","eventDelete","eventClearActiveEvent","DeleteEventFAB","dispatch","useDispatch","className","onClick","getState","a","response","json","ok","Swal","fire","msg","console","log","icon","faTrash","size","finishCheckingLoginState","startLogout","clear","logout","login","user","Navbar","name","useSelector","faSignOutAlt","CalendarEvent","title","customStyles","content","top","left","right","bottom","marginRight","transform","Modal","setAppElement","now","minutes","seconds","add","later","clone","initialEventData","notes","CalendarModal","useState","titleValid","setTitleValid","formValues","setFormValues","useEffect","handleChange","target","value","closeModal","overlayClassName","isOpen","onRequestClose","closeTimeoutMS","style","onSubmit","preventDefault","calendarEvent","momentStart","momentEnd","isSameOrAfter","trim","length","eventStartUpdate","u_id","onChange","minDate","htmlFor","autoComplete","rows","faSave","NewEventFAB","faPlus","localizer","momentLocalizer","CalendarScreen","lastView","setLastView","formatedEvents","startAccessor","endAccessor","eventPropGetter","isSelected","backgroundColor","_id","borderRadius","border","opacity","display","color","onDoubleClickEvent","onSelectEvent","eventSetActive","onSelectSlot","selectable","onView","setItem","view","components","useForm","values","setValues","reset","RegisterScreen","email","password","confirm_password","validator","isEmpty","isAlpha","isEmail","isLength","min","equals","user_name","Date","getTime","startRegister","placeholder","LoginScreen","startLogin","AuthRouter","exact","path","AppRouter","App","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.c07bf205.chunk.js","sourcesContent":["const types = {\r\n    UI_OPEN_MODAL: '[UI] OPEN_MODAL',\r\n    UI_CLOSE_MODAL: '[UI] CLOSE_MODAL',\r\n    UI_SET_ERROR: '[UI] SET_ERROR',\r\n\r\n    EVENT_NEW: '[EVENT] NEW',\r\n    EVENT_START_NEW: '[EVENT] START_NEW',\r\n    EVENT_UPDATE: '[EVENT] UPDATE',\r\n    EVENT_SET_ACTIVE: '[EVENT] SET_ACTIVE',\r\n    EVENT_CLEAR_ACTIVE_EVENT: '[EVENT] CLEAR_ACTIVE_EVENT',\r\n    EVENT_DELETE: '[EVENT] DELETE',\r\n    EVENT_LOAD: '[EVENT] LOAD',\r\n    EVENT_LOGOUT: '[EVENT] LOGOUT',\r\n\r\n    AUTH_LOGIN: '[AUTH] LOGIN',\r\n    AUTH_LOGOUT: '[AUTH] LOGOUT',\r\n    AUTH_FINISH_CHECKING_LOGIN_STATE: '[AUTH] FINISH_CHECKING_LOGIN_STATE',\r\n    AUTH_START_LOGIN: '[AUTH] START_LOGIN',\r\n    AUTH_START_REGISTER: '[AUTH] START_REGISTER',\r\n    AUTH_START_JWT_RENEW: '[AUTH] START_JWT_RENEW',\r\n};\r\n\r\nexport default types;\r\n","import types from '../types/types';\r\n\r\nconst initialState = { modal_open: false };\r\n\r\nconst uiReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.UI_OPEN_MODAL:\r\n            return { ...state, modal_open: true };\r\n        case types.UI_CLOSE_MODAL:\r\n            return { ...state, modal_open: false };\r\n        case types.UI_SET_ERROR:\r\n            return {\r\n                ...state,\r\n                error_msg: action.payload.errorMsg,\r\n                input_name: action.payload.inputName,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default uiReducer;\r\n","import types from '../types/types';\r\n\r\nconst initialState = {\r\n    events: [],\r\n    active_event: null,\r\n};\r\n\r\nconst eventReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.EVENT_NEW:\r\n            return {\r\n                ...state,\r\n                events: [action.payload, ...state.events],\r\n            };\r\n        case types.EVENT_LOAD:\r\n            return { ...state, events: [...action.payload] };\r\n        case types.EVENT_UPDATE:\r\n            return {\r\n                ...state,\r\n                events: state.events.map(event =>\r\n                    event.id === action.payload.id ? action.payload : event\r\n                ),\r\n            };\r\n        case types.EVENT_DELETE:\r\n            return {\r\n                ...state,\r\n                events: state.events.filter(\r\n                    event => event.id !== state.active_event.id\r\n                ),\r\n                active_event: null,\r\n            };\r\n        case types.EVENT_SET_ACTIVE:\r\n            return {\r\n                ...state,\r\n                active_event: action.payload,\r\n            };\r\n        case types.EVENT_CLEAR_ACTIVE_EVENT:\r\n            return {\r\n                ...state,\r\n                active_event: null,\r\n            };\r\n        case types.EVENT_LOGOUT:\r\n            return { ...initialState };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default eventReducer;\r\n","import types from '../types/types';\r\n\r\nconst initialState = {\r\n    checking: true,\r\n    // u_id: null,\r\n    // name: null,\r\n};\r\n\r\nconst authReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case types.AUTH_LOGIN:\r\n            return { ...state, checking: false, ...action.payload };\r\n        case types.AUTH_LOGOUT:\r\n            return { checking: false };\r\n        case types.AUTH_FINISH_CHECKING_LOGIN_STATE:\r\n            return {\r\n                ...state,\r\n                checking: false,\r\n            };\r\n\r\n        default:\r\n            return state;\r\n    }\r\n};\r\n\r\nexport default authReducer;\r\n","import { combineReducers } from 'redux';\r\n\r\nimport uiReducer from './uiReducer';\r\nimport eventReducer from './eventReducer';\r\nimport authReducer from './authReducer';\r\n\r\nconst rootReducer = combineReducers({\r\n    ui: uiReducer,\r\n    event: eventReducer,\r\n    auth: authReducer,\r\n});\r\n\r\nexport default rootReducer;\r\n","import { createStore, compose, applyMiddleware } from 'redux';\r\nimport thunk from 'redux-thunk';\r\n\r\nimport rootReducer from '../reducers/rootReducer';\r\n\r\nconst nodeEnv = process.env.NODE_ENV;\r\nconst composeEnhancers =\r\n    (nodeEnv !== 'production' &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ &&\r\n        window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__({\r\n            trace: true,\r\n            traceLimit: 25,\r\n        })) ||\r\n    compose;\r\n\r\nconst store = createStore(\r\n    rootReducer,\r\n    composeEnhancers(applyMiddleware(thunk))\r\n);\r\n\r\nexport default store;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router-dom';\r\n\r\nconst PrivateRoute = ({ isAuthenticated, component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            component={props =>\r\n                isAuthenticated ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect to=\"/auth/login\" />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PrivateRoute;\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router';\r\n\r\nconst PublicRoute = ({ isAuthenticated, component: Component, ...rest }) => {\r\n    return (\r\n        <Route\r\n            {...rest}\r\n            component={props =>\r\n                !isAuthenticated ? (\r\n                    <Component {...props} />\r\n                ) : (\r\n                    <Redirect to=\"/\" />\r\n                )\r\n            }\r\n        />\r\n    );\r\n};\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired,\r\n};\r\n\r\nexport default PublicRoute;\r\n","import types from '../types/types';\r\n\r\nexport const uiOpenModal = () => ({ type: types.UI_OPEN_MODAL });\r\n\r\nexport const uiCloseModal = () => ({ type: types.UI_CLOSE_MODAL });\r\n\r\nexport const uiSetError = (inputName, errorMsg) => ({\r\n    type: types.UI_SET_ERROR,\r\n    payload: {\r\n        errorMsg,\r\n        inputName,\r\n    },\r\n});\r\n","const BASE_URL = process.env.REACT_APP_API_URL;\r\n\r\nexport const fetchDataWithoutJWT = (endpoint, data, method = 'GET') => {\r\n    const URL = `${BASE_URL}/${endpoint}`;\r\n\r\n    if (method === 'GET') {\r\n        return fetch(URL);\r\n    } else {\r\n        return fetch(URL, {\r\n            method,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n            },\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n};\r\n\r\nexport const fetchDataWithJWT = (endpoint, data, method = 'GET') => {\r\n    const URL = `${BASE_URL}/${endpoint}`;\r\n    const token = localStorage.getItem('token') || '';\r\n\r\n    if (method === 'GET') {\r\n        return fetch(URL, {\r\n            method,\r\n            headers: {\r\n                'x-token': token,\r\n            },\r\n        });\r\n    } else {\r\n        return fetch(URL, {\r\n            method,\r\n            headers: {\r\n                'Content-Type': 'application/json',\r\n                'x-token': token,\r\n            },\r\n            body: JSON.stringify(data),\r\n        });\r\n    }\r\n};\r\n","import moment from 'moment';\r\n\r\nexport const prepareEvents = (events = []) => {\r\n    return events.map(event => ({\r\n        ...event,\r\n        start: moment(event.start).toDate(),\r\n        end: moment(event.end).toDate(),\r\n    }));\r\n};\r\n","import Swal from 'sweetalert2';\r\n\r\nimport types from '../types/types';\r\n\r\nimport { fetchDataWithJWT } from '../helpers/fetchData';\r\nimport { prepareEvents } from '../helpers/prepareEvents';\r\n\r\nexport const eventStartNew = calendarEvent => async (dispatch, getState) => {\r\n    try {\r\n        const { u_id, name } = getState().auth;\r\n        const response = await fetchDataWithJWT(\r\n            'events',\r\n            calendarEvent,\r\n            'POST'\r\n        );\r\n\r\n        const body = await response.json();\r\n        const { ok, event } = body;\r\n        const { id } = event;\r\n\r\n        if (ok) {\r\n            event.id = id;\r\n            event.user = { u_id, name };\r\n\r\n            dispatch(eventNew(event));\r\n        } else Swal.fire('Error', body?.msg, 'error');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nconst eventNew = event => ({ type: types.EVENT_NEW, payload: event });\r\n\r\nexport const eventStartLoad = () => async dispatch => {\r\n    try {\r\n        const response = await fetchDataWithJWT('events');\r\n\r\n        const body = await response.json();\r\n        const { events } = body;\r\n\r\n        const formatedEvents = prepareEvents(events);\r\n\r\n        dispatch(eventLoad(formatedEvents));\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nconst eventLoad = events => ({\r\n    type: types.EVENT_LOAD,\r\n    payload: events,\r\n});\r\n\r\nexport const eventStartUpdate = event => async dispatch => {\r\n    try {\r\n        const response = await fetchDataWithJWT(\r\n            `events/${event.id}`,\r\n            event,\r\n            'PUT'\r\n        );\r\n\r\n        const body = await response.json();\r\n        const { ok } = body;\r\n\r\n        if (ok) {\r\n            dispatch(eventUpdate(event));\r\n        } else Swal.fire('Error', body?.msg, 'error');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nconst eventUpdate = event => ({\r\n    type: types.EVENT_UPDATE,\r\n    payload: event,\r\n});\r\n\r\nexport const eventStartDelete = () => async (dispatch, getState) => {\r\n    try {\r\n        const { id } = getState().event.active_event;\r\n\r\n        const response = await fetchDataWithJWT(`events/${id}`, {}, 'DELETE');\r\n\r\n        const body = await response.json();\r\n        const { ok } = body;\r\n\r\n        if (ok) {\r\n            dispatch(eventDelete());\r\n        } else Swal.fire('Error', body?.msg, 'error');\r\n    } catch (error) {\r\n        console.log(error);\r\n    }\r\n};\r\n\r\nconst eventDelete = () => ({ type: types.EVENT_DELETE });\r\n\r\nexport const eventLogout = () => ({ type: types.EVENT_LOGOUT });\r\n\r\nexport const eventSetActive = event => ({\r\n    type: types.EVENT_SET_ACTIVE,\r\n    payload: event,\r\n});\r\n\r\nexport const eventClearActiveEvent = () => ({\r\n    type: types.EVENT_CLEAR_ACTIVE_EVENT,\r\n});\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTrash } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { eventStartDelete } from '../../actions/eventActions';\r\n\r\nconst DeleteEventFAB = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => dispatch(eventStartDelete());\r\n\r\n    return (\r\n        <button className=\"btn btn-danger fab-danger\" onClick={handleClick}>\r\n            <FontAwesomeIcon icon={faTrash} size={'lg'} />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default DeleteEventFAB;\r\n","import Swal from 'sweetalert2';\r\n\r\nimport types from '../types/types';\r\n\r\nimport { fetchDataWithJWT, fetchDataWithoutJWT } from '../helpers/fetchData';\r\n\r\nimport { eventLogout } from './eventActions';\r\n\r\nexport const startLogin = (email, password) => async dispatch => {\r\n    const response = await fetchDataWithoutJWT(\r\n        'auth',\r\n        { email, password },\r\n        'POST'\r\n    );\r\n\r\n    const body = await response.json();\r\n    const { ok, token, name, u_id } = body;\r\n\r\n    if (ok) {\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n        dispatch(login({ name, u_id }));\r\n    } else Swal.fire('Error', body?.msg, 'error');\r\n};\r\n\r\nexport const startRegister = (user_name, email, password) => async dispatch => {\r\n    const response = await fetchDataWithoutJWT(\r\n        'auth/register',\r\n        {\r\n            name: user_name,\r\n            email,\r\n            password,\r\n        },\r\n        'POST'\r\n    );\r\n\r\n    const body = await response.json();\r\n    const { ok, token, name, u_id } = body;\r\n\r\n    if (ok) {\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n        dispatch(login({ name, u_id }));\r\n    } else Swal.fire('Error', body?.msg, 'error');\r\n};\r\n\r\nexport const startCheckingLoginState = () => async dispatch => {\r\n    const response = await fetchDataWithJWT('auth/renew');\r\n\r\n    const body = await response.json();\r\n\r\n    const { ok, token, name, u_id } = body;\r\n\r\n    if (ok) {\r\n        localStorage.setItem('token', token);\r\n        localStorage.setItem('token-init-date', new Date().getTime());\r\n\r\n        dispatch(login({ name, u_id }));\r\n    } else {\r\n        dispatch(finishCheckingLoginState());\r\n    }\r\n};\r\n\r\nconst finishCheckingLoginState = () => ({\r\n    type: types.AUTH_FINISH_CHECKING_LOGIN_STATE,\r\n});\r\n\r\nexport const startLogout = () => dispatch => {\r\n    localStorage.clear();\r\n\r\n    dispatch(eventLogout());\r\n    dispatch(logout());\r\n};\r\n\r\nconst logout = () => ({ type: types.AUTH_LOGOUT });\r\n\r\nconst login = user => ({\r\n    type: types.AUTH_LOGIN,\r\n    payload: user,\r\n});\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSignOutAlt } from '@fortawesome/free-solid-svg-icons';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { startLogout } from '../../actions/authActions';\r\n\r\nconst Navbar = () => {\r\n    const { name } = useSelector(state => state.auth);\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => dispatch(startLogout());\r\n\r\n    return (\r\n        <div className=\"navbar navbar-dark bg-dark mb-4\">\r\n            <div className=\"navbar-brand\">\r\n                <small className=\"d-block\">Welcome</small>\r\n                <span className=\"font-weight-bold h3\">{name}</span>\r\n            </div>\r\n\r\n            <button className=\"btn btn-outline-light p-2\" onClick={handleClick}>\r\n                <FontAwesomeIcon icon={faSignOutAlt} />\r\n                <span className=\"ml-1 font-weight-bold\">Sign Out</span>\r\n            </button>\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Navbar;\r\n","import React from 'react';\r\n\r\nconst CalendarEvent = ({ event }) => {\r\n    const {\r\n        title,\r\n        user: { name },\r\n    } = event;\r\n\r\n    return (\r\n        <>\r\n            <span className=\"font-weight-bold d-block\">{title}</span>\r\n            <span className=\"d-block my-1\">— {name}</span>\r\n        </>\r\n    );\r\n};\r\n\r\nexport default CalendarEvent;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { uiCloseModal } from '../../actions/uiActions';\r\nimport {\r\n    eventClearActiveEvent,\r\n    eventStartNew,\r\n    eventStartUpdate,\r\n} from '../../actions/eventActions';\r\n\r\nimport Modal from 'react-modal';\r\n\r\nimport Swal from 'sweetalert2';\r\n\r\nimport DateTimePicker from 'react-datetime-picker';\r\n\r\nimport moment from 'moment';\r\n\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faSave } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport './CalendarModal.css';\r\n\r\nconst customStyles = {\r\n    content: {\r\n        top: '50%',\r\n        left: '50%',\r\n        right: 'auto',\r\n        bottom: 'auto',\r\n        marginRight: '-50%',\r\n        transform: 'translate(-50%, -50%)',\r\n    },\r\n};\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst now = moment().minutes(0).seconds(0).add(1, 'hour');\r\nconst later = now.clone().add(1, 'hour');\r\n\r\nconst initialEventData = {\r\n    title: '',\r\n    notes: '',\r\n    start: now.toDate(),\r\n    end: later.toDate(),\r\n};\r\n\r\nconst CalendarModal = () => {\r\n    const [titleValid, setTitleValid] = useState(true);\r\n\r\n    const { modal_open } = useSelector(state => state.ui);\r\n    const { active_event } = useSelector(state => state.event);\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const [formValues, setFormValues] = useState(initialEventData);\r\n\r\n    const { notes, title, start, end } = formValues;\r\n\r\n    useEffect(() => {\r\n        active_event\r\n            ? setFormValues(active_event)\r\n            : setFormValues(initialEventData);\r\n    }, [active_event]);\r\n\r\n    const handleChange = ({ target }) => {\r\n        setFormValues({\r\n            ...formValues,\r\n            [target.name]: target.value,\r\n        });\r\n    };\r\n\r\n    const handleStartDate = event =>\r\n        setFormValues({ ...formValues, start: event });\r\n\r\n    const handleEndDate = event => setFormValues({ ...formValues, end: event });\r\n\r\n    const closeModal = () => {\r\n        dispatch(uiCloseModal());\r\n        dispatch(eventClearActiveEvent());\r\n\r\n        setFormValues(initialEventData);\r\n    };\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        const momentStart = moment(start);\r\n        const momentEnd = moment(end);\r\n\r\n        if (momentStart.isSameOrAfter(momentEnd)) {\r\n            Swal.fire(\r\n                'Wait!',\r\n                'The end date must be higher than the start date',\r\n                'error'\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        if (title.trim().length < 2) {\r\n            setTitleValid(false);\r\n\r\n            return;\r\n        }\r\n\r\n        setTitleValid(true);\r\n\r\n        if (active_event) {\r\n            dispatch(eventStartUpdate(formValues));\r\n        } else {\r\n            dispatch(eventStartNew(formValues));\r\n        }\r\n\r\n        closeModal();\r\n    };\r\n\r\n    return (\r\n        <Modal\r\n            className=\"modal rounded-lg\"\r\n            overlayClassName=\"modal--background\"\r\n            isOpen={modal_open}\r\n            onRequestClose={closeModal}\r\n            closeTimeoutMS={200}\r\n            style={customStyles}\r\n        >\r\n            <h1 className=\"text-center font-weight-bold\">\r\n                {active_event ? 'Edit Event' : 'New Event'}\r\n            </h1>\r\n            <hr />\r\n\r\n            <form className=\"container\" onSubmit={handleSubmit}>\r\n                <div className=\"form-group\">\r\n                    <label className=\"col-form-label-sm font-weight-bold\">\r\n                        Start Date and Time\r\n                    </label>\r\n                    <DateTimePicker\r\n                        className=\"form-control\"\r\n                        onChange={handleStartDate}\r\n                        value={start}\r\n                        name=\"start_date\"\r\n                    />\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label className=\"col-form-label-sm font-weight-bold\">\r\n                        End Date and Time\r\n                    </label>\r\n                    <DateTimePicker\r\n                        className=\"form-control\"\r\n                        onChange={handleEndDate}\r\n                        minDate={start}\r\n                        value={end}\r\n                        name=\"end_date\"\r\n                    />\r\n                </div>\r\n\r\n                <hr />\r\n\r\n                <div className=\"form-group\">\r\n                    <label\r\n                        className=\"col-form-label-sm font-weight-bold\"\r\n                        htmlFor=\"title\"\r\n                    >\r\n                        Event Title\r\n                    </label>\r\n\r\n                    <input\r\n                        className={`form-control ${\r\n                            !titleValid && 'is-invalid'\r\n                        }`}\r\n                        type=\"text\"\r\n                        id=\"title\"\r\n                        name=\"title\"\r\n                        autoComplete=\"off\"\r\n                        value={title}\r\n                        onChange={handleChange}\r\n                    />\r\n                    <small className=\"form-text text-muted\">\r\n                        A short description\r\n                    </small>\r\n                </div>\r\n\r\n                <div className=\"form-group\">\r\n                    <label\r\n                        className=\"col-form-label-sm font-weight-bold\"\r\n                        htmlFor=\"notes\"\r\n                    >\r\n                        Event Notes\r\n                    </label>\r\n                    <textarea\r\n                        className=\"form-control\"\r\n                        rows=\"5\"\r\n                        id=\"notes\"\r\n                        name=\"notes\"\r\n                        value={notes}\r\n                        onChange={handleChange}\r\n                    ></textarea>\r\n                    <small className=\"form-text text-muted\">\r\n                        Aditional information\r\n                    </small>\r\n                </div>\r\n\r\n                <button className=\"btn btn-outline-dark btn-block my-4 p-2\">\r\n                    <FontAwesomeIcon icon={faSave} />\r\n                    <span className=\"ml-1 font-weight-bold\">Save</span>\r\n                </button>\r\n            </form>\r\n        </Modal>\r\n    );\r\n};\r\n\r\nexport default CalendarModal;\r\n","import React from 'react';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { uiOpenModal } from '../../actions/uiActions';\r\n\r\nconst NewEventFAB = () => {\r\n    const dispatch = useDispatch();\r\n\r\n    const handleClick = () => dispatch(uiOpenModal());\r\n\r\n    return (\r\n        <button className=\"btn btn-primary fab\" onClick={handleClick}>\r\n            <FontAwesomeIcon icon={faPlus} size=\"lg\" />\r\n        </button>\r\n    );\r\n};\r\n\r\nexport default NewEventFAB;\r\n","import React, { useEffect, useState } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\n\r\nimport { uiOpenModal } from '../../actions/uiActions';\r\nimport {\r\n    eventClearActiveEvent,\r\n    eventSetActive,\r\n    eventStartLoad,\r\n} from '../../actions/eventActions';\r\n\r\nimport { Calendar, momentLocalizer } from 'react-big-calendar';\r\nimport 'react-big-calendar/lib/css/react-big-calendar.css';\r\n\r\nimport DeleteEventFAB from '../ui/DeleteEventFAB';\r\n\r\nimport moment from 'moment';\r\n\r\nimport Navbar from '../ui/Navbar';\r\nimport CalendarEvent from './CalendarEvent';\r\nimport CalendarModal from './CalendarModal';\r\nimport NewEventFAB from '../ui/NewEventFAB';\r\n\r\nconst localizer = momentLocalizer(moment);\r\n\r\nconst CalendarScreen = () => {\r\n    const [lastView, setLastView] = useState(\r\n        localStorage.getItem('lastView') || 'month'\r\n    );\r\n\r\n    const dispatch = useDispatch();\r\n    const { events, active_event } = useSelector(state => state.event);\r\n    const { u_id } = useSelector(state => state.auth);\r\n\r\n    const onDoubleClick = () => dispatch(uiOpenModal());\r\n\r\n    const onSelect = event => dispatch(eventSetActive(event));\r\n\r\n    const onSelectSlot = () => dispatch(eventClearActiveEvent());\r\n\r\n    const onViewChange = event => {\r\n        setLastView(event);\r\n\r\n        localStorage.setItem('lastView', event);\r\n    };\r\n\r\n    const eventStyleGetter = (event, start, end, isSelected) => {\r\n        const style = {\r\n            backgroundColor: u_id === event.user._id ? '#367cf7' : '#465660',\r\n            borderRadius: 0,\r\n            border: 'none',\r\n            opacity: 0.8,\r\n            display: 'block',\r\n            color: '#fff',\r\n        };\r\n\r\n        return { style };\r\n    };\r\n\r\n    useEffect(() => {\r\n        dispatch(eventStartLoad());\r\n    }, [dispatch]);\r\n\r\n    return (\r\n        <div className=\"calendar-screen\">\r\n            <Navbar />\r\n\r\n            <Calendar\r\n                localizer={localizer}\r\n                events={events}\r\n                startAccessor=\"start\"\r\n                endAccessor=\"end\"\r\n                eventPropGetter={eventStyleGetter}\r\n                onDoubleClickEvent={onDoubleClick}\r\n                onSelectEvent={onSelect}\r\n                onSelectSlot={onSelectSlot}\r\n                selectable={true}\r\n                onView={onViewChange}\r\n                view={lastView}\r\n                components={{ event: CalendarEvent }}\r\n            />\r\n\r\n            <NewEventFAB />\r\n\r\n            {active_event && <DeleteEventFAB />}\r\n\r\n            <CalendarModal />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default CalendarScreen;\r\n","import { useState } from 'react';\r\n\r\nconst useForm = (initialState = {}) => {\r\n    const [values, setValues] = useState(initialState);\r\n\r\n    const reset = () => setValues(initialState);\r\n\r\n    const handleChange = ({ target }) =>\r\n        setValues({\r\n            ...values,\r\n            [target.name]: target.value,\r\n        });\r\n\r\n    return [values, handleChange, reset];\r\n};\r\n\r\nexport default useForm;\r\n","import React from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\nimport validator from 'validator';\r\nimport { startRegister } from '../../actions/authActions';\r\n\r\nimport { uiSetError } from '../../actions/uiActions';\r\n\r\nimport useForm from '../../hooks/useForm';\r\n\r\nconst RegisterScreen = () => {\r\n    const [formValues, handleChange] = useForm({\r\n        name: '',\r\n        email: '',\r\n        password: '',\r\n        confirm_password: '',\r\n    });\r\n\r\n    const { error_msg, input_name } = useSelector(state => state.ui);\r\n    const { name, email, password, confirm_password } = formValues;\r\n\r\n    const dispatch = useDispatch();\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (validator.isEmpty(name)) {\r\n            dispatch(uiSetError('name', \"Name can't be empty\"));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!validator.isAlpha(name)) {\r\n            dispatch(uiSetError('name', 'Names can only contain letters'));\r\n\r\n            return;\r\n        }\r\n\r\n        if (!validator.isEmail(email) || validator.isEmpty(email)) {\r\n            dispatch(uiSetError('email', 'Please type a valid email'));\r\n\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !validator.isLength(password, { min: 6 }) ||\r\n            validator.isEmpty(password)\r\n        ) {\r\n            dispatch(\r\n                uiSetError('password', 'Passwords must be 6 characters long')\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        if (!validator.equals(password, confirm_password)) {\r\n            dispatch(uiSetError('confirm_password', 'Passwords are not equal'));\r\n\r\n            return;\r\n        }\r\n\r\n        dispatch(uiSetError(null, null));\r\n        dispatch(startRegister(name, email, password));\r\n    };\r\n\r\n    return (\r\n        <main className=\"min-vh-100 d-flex align-items-center\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-12 col-md-6\">\r\n                        <div className=\"card-body border rounded-lg\">\r\n                            <h1 className=\"font-weight-bold mb-4\">Sign Up</h1>\r\n\r\n                            <form onSubmit={handleSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <label\r\n                                        className=\"col-form-label-sm font-weight-bold\"\r\n                                        htmlFor=\"name\"\r\n                                    >\r\n                                        Name\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"text\"\r\n                                        id=\"name\"\r\n                                        name=\"name\"\r\n                                        className={\r\n                                            input_name === 'name'\r\n                                                ? 'form-control text-muted is-invalid'\r\n                                                : 'form-control text-muted'\r\n                                        }\r\n                                        placeholder=\"John\"\r\n                                        value={name}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {input_name === 'name' && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {error_msg}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label\r\n                                        className=\"col-form-label-sm font-weight-bold\"\r\n                                        htmlFor=\"email\"\r\n                                    >\r\n                                        Email\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        name=\"email\"\r\n                                        className={\r\n                                            input_name === 'email'\r\n                                                ? 'form-control text-muted is-invalid'\r\n                                                : 'form-control text-muted'\r\n                                        }\r\n                                        placeholder=\"john@example.com\"\r\n                                        value={email}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {input_name === 'email' && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {error_msg}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"row\">\r\n                                    <div className=\"col-12 col-md-6\">\r\n                                        <div className=\"form-group\">\r\n                                            <label\r\n                                                className=\"col-form-label-sm font-weight-bold\"\r\n                                                htmlFor=\"password\"\r\n                                            >\r\n                                                Password\r\n                                            </label>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                id=\"password\"\r\n                                                name=\"password\"\r\n                                                className={\r\n                                                    input_name === 'password'\r\n                                                        ? 'form-control text-muted is-invalid'\r\n                                                        : 'form-control text-muted'\r\n                                                }\r\n                                                value={password}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                            {input_name === 'password' && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                    {error_msg}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                    <div className=\"col-12 col-md-6\">\r\n                                        <div className=\"form-group\">\r\n                                            <label\r\n                                                className=\"col-form-label-sm font-weight-bold\"\r\n                                                htmlFor=\"confirm_password\"\r\n                                            >\r\n                                                Confirm Password\r\n                                            </label>\r\n                                            <input\r\n                                                type=\"password\"\r\n                                                id=\"confirm_password\"\r\n                                                name=\"confirm_password\"\r\n                                                className={\r\n                                                    input_name ===\r\n                                                    'confirm_password'\r\n                                                        ? 'form-control text-muted is-invalid'\r\n                                                        : 'form-control text-muted'\r\n                                                }\r\n                                                value={confirm_password}\r\n                                                onChange={handleChange}\r\n                                            />\r\n                                            {input_name ===\r\n                                                'confirm_password' && (\r\n                                                <div className=\"invalid-feedback\">\r\n                                                    {error_msg}\r\n                                                </div>\r\n                                            )}\r\n                                        </div>\r\n                                    </div>\r\n                                </div>\r\n\r\n                                <button className=\"btn btn-outline-dark font-weight-bold btn-block mt-2 p-2\">\r\n                                    Sign Up\r\n                                </button>\r\n                            </form>\r\n\r\n                            <Link\r\n                                className=\"mt-5 d-block font-weight-bold text-dark\"\r\n                                to=\"/auth/login\"\r\n                            >\r\n                                Have an account already?\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default RegisterScreen;\r\n","import React from 'react';\r\nimport validator from 'validator';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { startLogin } from '../../actions/authActions';\r\n\r\nimport useForm from '../../hooks/useForm';\r\nimport { uiSetError } from '../../actions/uiActions';\r\n\r\nconst LoginScreen = () => {\r\n    const [formValues, handleChange] = useForm({\r\n        email: '',\r\n        password: '',\r\n    });\r\n\r\n    const { error_msg, input_name } = useSelector(state => state.ui);\r\n    const dispatch = useDispatch();\r\n\r\n    const { email, password } = formValues;\r\n\r\n    const handleSubmit = event => {\r\n        event.preventDefault();\r\n\r\n        if (!validator.isEmail(email) || validator.isEmpty(email)) {\r\n            dispatch(uiSetError('email', 'Please type a valid email'));\r\n\r\n            return;\r\n        }\r\n\r\n        if (\r\n            !validator.isLength(password, { min: 6 }) ||\r\n            validator.isEmpty(password)\r\n        ) {\r\n            dispatch(\r\n                uiSetError('password', 'Passwords must be 6 characters long')\r\n            );\r\n\r\n            return;\r\n        }\r\n\r\n        dispatch(uiSetError(null, null));\r\n        dispatch(startLogin(email, password));\r\n    };\r\n\r\n    return (\r\n        <main className=\"min-vh-100 d-flex align-items-center\">\r\n            <div className=\"container\">\r\n                <div className=\"row justify-content-center\">\r\n                    <div className=\"col-12 col-md-4\">\r\n                        <div className=\"card-body border rounded-lg\">\r\n                            <h1 className=\"font-weight-bold mb-4\">Sign In</h1>\r\n\r\n                            <form onSubmit={handleSubmit}>\r\n                                <div className=\"form-group\">\r\n                                    <label\r\n                                        className=\"col-form-label-sm font-weight-bold\"\r\n                                        htmlFor=\"email\"\r\n                                    >\r\n                                        Email\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"email\"\r\n                                        id=\"email\"\r\n                                        name=\"email\"\r\n                                        className={\r\n                                            input_name === 'email'\r\n                                                ? 'form-control text-muted is-invalid'\r\n                                                : 'form-control text-muted'\r\n                                        }\r\n                                        placeholder=\"john@example.com\"\r\n                                        value={email}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {input_name === 'email' && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {error_msg}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <div className=\"form-group\">\r\n                                    <label\r\n                                        className=\"col-form-label-sm font-weight-bold\"\r\n                                        htmlFor=\"password\"\r\n                                    >\r\n                                        Password\r\n                                    </label>\r\n                                    <input\r\n                                        type=\"password\"\r\n                                        id=\"password\"\r\n                                        name=\"password\"\r\n                                        className={\r\n                                            input_name === 'password'\r\n                                                ? 'form-control text-muted is-invalid'\r\n                                                : 'form-control text-muted'\r\n                                        }\r\n                                        value={password}\r\n                                        onChange={handleChange}\r\n                                    />\r\n                                    {input_name === 'password' && (\r\n                                        <div className=\"invalid-feedback\">\r\n                                            {error_msg}\r\n                                        </div>\r\n                                    )}\r\n                                </div>\r\n\r\n                                <button className=\"btn btn-outline-dark font-weight-bold btn-block mt-4 p-2\">\r\n                                    Sign In\r\n                                </button>\r\n                            </form>\r\n\r\n                            <Link\r\n                                className=\"mt-5 d-block font-weight-bold text-dark\"\r\n                                to=\"/auth/register\"\r\n                            >\r\n                                Don't have an account?\r\n                            </Link>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n        </main>\r\n    );\r\n};\r\n\r\nexport default LoginScreen;\r\n","import React from 'react';\r\nimport { Switch, Route, Redirect } from 'react-router-dom';\r\n\r\nimport RegisterScreen from '../components/auth/RegisterScreen';\r\nimport LoginScreen from '../components/auth/LoginScreen';\r\n\r\nexport const AuthRouter = () => {\r\n    return (\r\n        <Switch>\r\n            <Route exact path=\"/auth/login\" component={LoginScreen} />\r\n            <Route exact path=\"/auth/register\" component={RegisterScreen} />\r\n\r\n            <Redirect to=\"/auth/login\" />\r\n        </Switch>\r\n    );\r\n};\r\n","import React, { useEffect } from 'react';\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { BrowserRouter as Router, Switch, Redirect } from 'react-router-dom';\r\n\r\nimport PrivateRoute from './PrivateRoute';\r\nimport PublicRoute from './PublicRoute';\r\n\r\nimport CalendarScreen from '../components/calendar/CalendarScreen';\r\nimport { AuthRouter } from './AuthRouter';\r\n\r\nimport { startCheckingLoginState } from '../actions/authActions';\r\n\r\nconst AppRouter = () => {\r\n    const dispatch = useDispatch();\r\n    const { checking, u_id } = useSelector(state => state.auth);\r\n\r\n    useEffect(() => {\r\n        dispatch(startCheckingLoginState());\r\n    }, [dispatch]);\r\n\r\n    if (checking) return <h5>Wait...</h5>;\r\n\r\n    return (\r\n        <Router>\r\n            <Switch>\r\n                <PublicRoute\r\n                    isAuthenticated={!!u_id}\r\n                    component={AuthRouter}\r\n                    path=\"/auth\"\r\n                />\r\n\r\n                <PrivateRoute\r\n                    exact\r\n                    isAuthenticated={!!u_id}\r\n                    component={CalendarScreen}\r\n                    path=\"/\"\r\n                />\r\n\r\n                <Redirect to=\"/\" />\r\n            </Switch>\r\n        </Router>\r\n    );\r\n};\r\n\r\nexport default AppRouter;\r\n","import React from 'react';\nimport { Provider } from 'react-redux';\n\nimport store from './store/store';\n\nimport AppRouter from './router/AppRouter';\n\nconst App = () => {\n    return (\n        <Provider store={store}>\n            <AppRouter />\n        </Provider>\n    );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\nimport './index.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}